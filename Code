#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Servo.h>  // Include the Servo library
#include <Adafruit_Fingerprint.h>  // Include the fingerprint library
#include <SoftwareSerial.h>  // For fingerprint sensor communication

// LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2);  // LCD address 0x27, 16x2 display

// Keypad setup
const byte ROW_NUM    = 4;    // Four rows
const byte COLUMN_NUM = 4;    // Four columns

char keys[ROW_NUM][COLUMN_NUM] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte pin_rows[ROW_NUM] = {9, 8, 7, 6};  // Connect rows to Arduino pins 9, 8, 7, 6
byte pin_column[COLUMN_NUM] = {5, 4, 3, 2};  // Connect columns to Arduino pins 5, 4, 3, 2

Keypad keypad = Keypad(makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM);

// Solenoid control setup (connected to relay via pin 10)
const int solenoidPin = 10;  // Pin to control the solenoid relay

// LED and Buzzer setup for wrong password indication
const int ledPin = 11;  // LED pin for wrong password indication
const int buzzerPin = 12;  // Buzzer pin for wrong password indication

// Servo setup (Pin 13 connected to servo signal)
Servo myServo;  // Create a Servo object
const int servoPin = 13;  // Pin 13 is used to control the servo motor

// Password definition
String password = "20080AB";  // The predefined password
String enteredPassword = "";  // To store the entered password

// Variables to track wrong attempts and state
int wrongAttempts = 0;  // Count of wrong attempts
const int maxAttempts = 3;  // Maximum wrong attempts before lockout
const int lockoutAttempts = 4;  // Lockout on the 4th wrong attempt

// Fingerprint sensor setup
SoftwareSerial mySerial(A0, A1);  // A0 as RX (digital 14), A1 as TX (digital 15)
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

bool fingerprintVerified = false;  // Flag to check if fingerprint is verified

void setup() {
  // Initialize the LCD
  lcd.begin(16, 2);
  lcd.backlight();  // Turn on the backlight
  
  // Initialize the solenoid pin as OUTPUT
  pinMode(solenoidPin, OUTPUT);
  
  // Initialize LED and Buzzer pin as OUTPUT
  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  
  // Start with the solenoid locked (turn relay off)
  digitalWrite(solenoidPin, LOW);

  // Attach the servo motor to pin 13
  myServo.attach(servoPin);

  lcd.setCursor(0, 0);
  lcd.print("Scan Finger");

  // Initialize the fingerprint sensor
  mySerial.begin(57600);
  finger.begin(57600);
  
  if (finger.verifyPassword()) {
    Serial.println("Fingerprint sensor found!");
  } else {
    Serial.println("Fingerprint sensor not found :(");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Sensor Error");
    while (1);  // Halt if fingerprint sensor is not detected
  }
}

void loop() {
  if (!fingerprintVerified) {
    checkFingerprint();  // Check fingerprint before allowing password entry
  } else {
    lcd.setCursor(0, 0);
    lcd.print("Enter Password:");
    char key = keypad.getKey();  // Get the key pressed on the keypad

    if (key) {
      if (key == '#') {  // When user presses '#' to submit the password
        if (enteredPassword == password) {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Password Correct!");
          lcd.setCursor(0, 1);
          lcd.print("Unlocking...");

          // Unlock the solenoid (turn relay ON)
          digitalWrite(solenoidPin, HIGH);
          
          // Rotate the servo to 180 degrees (Unlocking the door)
          myServo.write(180);  // Rotate servo to 180 degrees
          delay(2000);  // Wait for 2 seconds to simulate door being unlocked
          
          // Rotate the servo back to 0 degrees (Locking the door)
          myServo.write(0);  // Rotate servo back to 0 degrees
          delay(2000);  // Wait for 2 seconds
          
          // Lock the solenoid back (turn relay OFF)
          digitalWrite(solenoidPin, LOW);
lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Scan Finger");
          enteredPassword = "";  // Reset the entered password for next attempt

          // Reset wrong attempts
          wrongAttempts = 0;
          fingerprintVerified = false;  // Reset fingerprint verification
        } else {
          wrongAttempts++;  // Increment wrong attempts count
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Wrong Password");
          lcd.setCursor(0, 1);
          lcd.print("Try Again");
          delay(1500);
          lcd.clear();

          // If wrong attempts are less than 4
          if (wrongAttempts < lockoutAttempts) {
            // Normal wrong attempt behavior (no LED/buzzer)
          } 
          // If the 4th wrong attempt occurs (i.e., lockout)
          else if (wrongAttempts == lockoutAttempts) {
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Too Many Attempts");
            lcd.setCursor(0, 1);
            lcd.print("Locking for 10s");

            // Blink LED and sound buzzer on the 4th wrong attempt
            for (int i = 0; i < 10; i++) {  // Blink LED and sound buzzer 5 times
              digitalWrite(ledPin, HIGH);   // Turn on LED
              digitalWrite(buzzerPin, HIGH);  // Turn on buzzer
              delay(500);  // Wait for 500 milliseconds
              digitalWrite(ledPin, LOW);    // Turn off LED
              digitalWrite(buzzerPin, LOW); // Turn off buzzer
              delay(500);  // Wait for 500 milliseconds
            }

            // Lock the system for 10 seconds (no new input allowed)
            delay(10000);  // 10 seconds lockout

            // Reset wrong attempts after lockout
            wrongAttempts = 0;
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Enter Password:");
          }
          enteredPassword = "";  // Reset entered password for next attempt
        }
      } else if (key == '*') {  // Clear input on '*'
        enteredPassword = "";
        lcd.setCursor(0, 1);
        lcd.print("                ");  // Clear the second row
      } else {
        enteredPassword += key;  // Append the pressed key to the enteredPassword string
        lcd.setCursor(0, 1);  // Set cursor to second row to show entered password
        lcd.print(enteredPassword);  // Display the entered password
      }
    }
  }
}

// Function to check the fingerprint
void checkFingerprint() {
  int p = finger.getImage();
  if (p != FINGERPRINT_OK) return;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return;

  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Finger Matched!");
    delay(1000);
    lcd.clear();
    fingerprintVerified = true;  // Set flag to true if fingerprint matches
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("No Match");
    delay(1000);
    lcd.clear();
  }
}
